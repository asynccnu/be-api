// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/elecprice/v1/elecprice.proto

package elecpricev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElecpriceService_Check_FullMethodName       = "/elecprice.v1.ElecpriceService/Check"
	ElecpriceService_SetStandard_FullMethodName = "/elecprice.v1.ElecpriceService/SetStandard"
)

// ElecpriceServiceClient is the client API for ElecpriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 查询电费的接口定义
type ElecpriceServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	SetStandard(ctx context.Context, in *SetStandardRequest, opts ...grpc.CallOption) (*SetStandardResponse, error)
}

type elecpriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElecpriceServiceClient(cc grpc.ClientConnInterface) ElecpriceServiceClient {
	return &elecpriceServiceClient{cc}
}

func (c *elecpriceServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elecpriceServiceClient) SetStandard(ctx context.Context, in *SetStandardRequest, opts ...grpc.CallOption) (*SetStandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStandardResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_SetStandard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElecpriceServiceServer is the server API for ElecpriceService service.
// All implementations must embed UnimplementedElecpriceServiceServer
// for forward compatibility.
//
// 查询电费的接口定义
type ElecpriceServiceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	SetStandard(context.Context, *SetStandardRequest) (*SetStandardResponse, error)
	mustEmbedUnimplementedElecpriceServiceServer()
}

// UnimplementedElecpriceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElecpriceServiceServer struct{}

func (UnimplementedElecpriceServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedElecpriceServiceServer) SetStandard(context.Context, *SetStandardRequest) (*SetStandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStandard not implemented")
}
func (UnimplementedElecpriceServiceServer) mustEmbedUnimplementedElecpriceServiceServer() {}
func (UnimplementedElecpriceServiceServer) testEmbeddedByValue()                          {}

// UnsafeElecpriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElecpriceServiceServer will
// result in compilation errors.
type UnsafeElecpriceServiceServer interface {
	mustEmbedUnimplementedElecpriceServiceServer()
}

func RegisterElecpriceServiceServer(s grpc.ServiceRegistrar, srv ElecpriceServiceServer) {
	// If the following call pancis, it indicates UnimplementedElecpriceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElecpriceService_ServiceDesc, srv)
}

func _ElecpriceService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElecpriceService_SetStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).SetStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_SetStandard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).SetStandard(ctx, req.(*SetStandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElecpriceService_ServiceDesc is the grpc.ServiceDesc for ElecpriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElecpriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elecprice.v1.ElecpriceService",
	HandlerType: (*ElecpriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ElecpriceService_Check_Handler,
		},
		{
			MethodName: "SetStandard",
			Handler:    _ElecpriceService_SetStandard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/elecprice/v1/elecprice.proto",
}
