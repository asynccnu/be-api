// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/feedUserCount/v1/feedUserCount.proto

package feedUserCountv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedUserCountService_AddFeedUserCount_FullMethodName     = "/banner.v1.FeedUserCountService/AddFeedUserCount"
	FeedUserCountService_GetFeedUserLevels_FullMethodName    = "/banner.v1.FeedUserCountService/GetFeedUserLevels"
	FeedUserCountService_ChangeFeedUserLevels_FullMethodName = "/banner.v1.FeedUserCountService/ChangeFeedUserLevels"
	FeedUserCountService_ClearFeedUserLevels_FullMethodName  = "/banner.v1.FeedUserCountService/ClearFeedUserLevels"
)

// FeedUserCountServiceClient is the client API for FeedUserCountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedUserCountServiceClient interface {
	AddFeedUserCount(ctx context.Context, in *AddFeedUserCountReq, opts ...grpc.CallOption) (*AddFeedUserCountResp, error)
	GetFeedUserLevels(ctx context.Context, in *GetFeedUserLevelsReq, opts ...grpc.CallOption) (*GetFeedUserLevelsResp, error)
	ChangeFeedUserLevels(ctx context.Context, in *ChangeFeedUserLevelsReq, opts ...grpc.CallOption) (*ChangeFeedUserLevelsResp, error)
	ClearFeedUserLevels(ctx context.Context, in *ClearFeedUserLevelsReq, opts ...grpc.CallOption) (*ClearFeedUserLevelsResp, error)
}

type feedUserCountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedUserCountServiceClient(cc grpc.ClientConnInterface) FeedUserCountServiceClient {
	return &feedUserCountServiceClient{cc}
}

func (c *feedUserCountServiceClient) AddFeedUserCount(ctx context.Context, in *AddFeedUserCountReq, opts ...grpc.CallOption) (*AddFeedUserCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFeedUserCountResp)
	err := c.cc.Invoke(ctx, FeedUserCountService_AddFeedUserCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedUserCountServiceClient) GetFeedUserLevels(ctx context.Context, in *GetFeedUserLevelsReq, opts ...grpc.CallOption) (*GetFeedUserLevelsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedUserLevelsResp)
	err := c.cc.Invoke(ctx, FeedUserCountService_GetFeedUserLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedUserCountServiceClient) ChangeFeedUserLevels(ctx context.Context, in *ChangeFeedUserLevelsReq, opts ...grpc.CallOption) (*ChangeFeedUserLevelsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeFeedUserLevelsResp)
	err := c.cc.Invoke(ctx, FeedUserCountService_ChangeFeedUserLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedUserCountServiceClient) ClearFeedUserLevels(ctx context.Context, in *ClearFeedUserLevelsReq, opts ...grpc.CallOption) (*ClearFeedUserLevelsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearFeedUserLevelsResp)
	err := c.cc.Invoke(ctx, FeedUserCountService_ClearFeedUserLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedUserCountServiceServer is the server API for FeedUserCountService service.
// All implementations must embed UnimplementedFeedUserCountServiceServer
// for forward compatibility.
type FeedUserCountServiceServer interface {
	AddFeedUserCount(context.Context, *AddFeedUserCountReq) (*AddFeedUserCountResp, error)
	GetFeedUserLevels(context.Context, *GetFeedUserLevelsReq) (*GetFeedUserLevelsResp, error)
	ChangeFeedUserLevels(context.Context, *ChangeFeedUserLevelsReq) (*ChangeFeedUserLevelsResp, error)
	ClearFeedUserLevels(context.Context, *ClearFeedUserLevelsReq) (*ClearFeedUserLevelsResp, error)
	mustEmbedUnimplementedFeedUserCountServiceServer()
}

// UnimplementedFeedUserCountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedUserCountServiceServer struct{}

func (UnimplementedFeedUserCountServiceServer) AddFeedUserCount(context.Context, *AddFeedUserCountReq) (*AddFeedUserCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedUserCount not implemented")
}
func (UnimplementedFeedUserCountServiceServer) GetFeedUserLevels(context.Context, *GetFeedUserLevelsReq) (*GetFeedUserLevelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedUserLevels not implemented")
}
func (UnimplementedFeedUserCountServiceServer) ChangeFeedUserLevels(context.Context, *ChangeFeedUserLevelsReq) (*ChangeFeedUserLevelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeFeedUserLevels not implemented")
}
func (UnimplementedFeedUserCountServiceServer) ClearFeedUserLevels(context.Context, *ClearFeedUserLevelsReq) (*ClearFeedUserLevelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFeedUserLevels not implemented")
}
func (UnimplementedFeedUserCountServiceServer) mustEmbedUnimplementedFeedUserCountServiceServer() {}
func (UnimplementedFeedUserCountServiceServer) testEmbeddedByValue()                              {}

// UnsafeFeedUserCountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedUserCountServiceServer will
// result in compilation errors.
type UnsafeFeedUserCountServiceServer interface {
	mustEmbedUnimplementedFeedUserCountServiceServer()
}

func RegisterFeedUserCountServiceServer(s grpc.ServiceRegistrar, srv FeedUserCountServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedUserCountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedUserCountService_ServiceDesc, srv)
}

func _FeedUserCountService_AddFeedUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedUserCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedUserCountServiceServer).AddFeedUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedUserCountService_AddFeedUserCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedUserCountServiceServer).AddFeedUserCount(ctx, req.(*AddFeedUserCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedUserCountService_GetFeedUserLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedUserLevelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedUserCountServiceServer).GetFeedUserLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedUserCountService_GetFeedUserLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedUserCountServiceServer).GetFeedUserLevels(ctx, req.(*GetFeedUserLevelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedUserCountService_ChangeFeedUserLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFeedUserLevelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedUserCountServiceServer).ChangeFeedUserLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedUserCountService_ChangeFeedUserLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedUserCountServiceServer).ChangeFeedUserLevels(ctx, req.(*ChangeFeedUserLevelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedUserCountService_ClearFeedUserLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearFeedUserLevelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedUserCountServiceServer).ClearFeedUserLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedUserCountService_ClearFeedUserLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedUserCountServiceServer).ClearFeedUserLevels(ctx, req.(*ClearFeedUserLevelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedUserCountService_ServiceDesc is the grpc.ServiceDesc for FeedUserCountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedUserCountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner.v1.FeedUserCountService",
	HandlerType: (*FeedUserCountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeedUserCount",
			Handler:    _FeedUserCountService_AddFeedUserCount_Handler,
		},
		{
			MethodName: "GetFeedUserLevels",
			Handler:    _FeedUserCountService_GetFeedUserLevels_Handler,
		},
		{
			MethodName: "ChangeFeedUserLevels",
			Handler:    _FeedUserCountService_ChangeFeedUserLevels_Handler,
		},
		{
			MethodName: "ClearFeedUserLevels",
			Handler:    _FeedUserCountService_ClearFeedUserLevels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/feedUserCount/v1/feedUserCount.proto",
}
