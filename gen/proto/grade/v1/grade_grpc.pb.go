// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/grade/v1/grade.proto

package gradev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Grade_GradeAll_FullMethodName    = "/grade.v1.Grade/Grade_all"
	Grade_GradeDetail_FullMethodName = "/grade.v1.Grade/Grade_detail"
)

// GradeClient is the client API for Grade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 查询成绩的接口定义
type GradeClient interface {
	GradeAll(ctx context.Context, in *GradeRequestAll, opts ...grpc.CallOption) (*GradeResponseAll, error)
	GradeDetail(ctx context.Context, in *GradeRequestDetail, opts ...grpc.CallOption) (*GradeResponseDetail, error)
}

type gradeClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeClient(cc grpc.ClientConnInterface) GradeClient {
	return &gradeClient{cc}
}

func (c *gradeClient) GradeAll(ctx context.Context, in *GradeRequestAll, opts ...grpc.CallOption) (*GradeResponseAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GradeResponseAll)
	err := c.cc.Invoke(ctx, Grade_GradeAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeClient) GradeDetail(ctx context.Context, in *GradeRequestDetail, opts ...grpc.CallOption) (*GradeResponseDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GradeResponseDetail)
	err := c.cc.Invoke(ctx, Grade_GradeDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeServer is the server API for Grade service.
// All implementations must embed UnimplementedGradeServer
// for forward compatibility.
//
// 查询成绩的接口定义
type GradeServer interface {
	GradeAll(context.Context, *GradeRequestAll) (*GradeResponseAll, error)
	GradeDetail(context.Context, *GradeRequestDetail) (*GradeResponseDetail, error)
	mustEmbedUnimplementedGradeServer()
}

// UnimplementedGradeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGradeServer struct{}

func (UnimplementedGradeServer) GradeAll(context.Context, *GradeRequestAll) (*GradeResponseAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeAll not implemented")
}
func (UnimplementedGradeServer) GradeDetail(context.Context, *GradeRequestDetail) (*GradeResponseDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeDetail not implemented")
}
func (UnimplementedGradeServer) mustEmbedUnimplementedGradeServer() {}
func (UnimplementedGradeServer) testEmbeddedByValue()               {}

// UnsafeGradeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradeServer will
// result in compilation errors.
type UnsafeGradeServer interface {
	mustEmbedUnimplementedGradeServer()
}

func RegisterGradeServer(s grpc.ServiceRegistrar, srv GradeServer) {
	// If the following call pancis, it indicates UnimplementedGradeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Grade_ServiceDesc, srv)
}

func _Grade_GradeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeRequestAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServer).GradeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grade_GradeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServer).GradeAll(ctx, req.(*GradeRequestAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grade_GradeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeRequestDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServer).GradeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grade_GradeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServer).GradeDetail(ctx, req.(*GradeRequestDetail))
	}
	return interceptor(ctx, in, info, handler)
}

// Grade_ServiceDesc is the grpc.ServiceDesc for Grade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grade.v1.Grade",
	HandlerType: (*GradeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grade_all",
			Handler:    _Grade_GradeAll_Handler,
		},
		{
			MethodName: "Grade_detail",
			Handler:    _Grade_GradeDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grade/v1/grade.proto",
}
